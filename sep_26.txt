https://leetcode.com/problems/triangle/
https://leetcode.com/problems/triangle/discuss/38735/Python-easy-to-understand-solutions-(top-down-bottom-up).

a
b c 
d e f 

The shortest path passing though b to the bottom is b + min(d, e), the shortest from c is c + min(e, f). Store the results in a temp.
a
b c
d e f
g h i j
2
3 4
6 5 7
4 1 8 3

2
5 6
11 10 13
15 11 18 16
min(15, 11, 18, 16)
    0 1 2 3
0 [[2],
1  [3,4],
2  [6,5,7],
3  [4,1,8,3]]

def start_http():
  socket.open

def connect():
  start_http()

def is_last_row(index, length):
  return index == length-1
single 
level of 
abstraction 
principle

def minimumTotal2(self, triangle):
    height = len(triange)
    for i in xrange(1, height): # iterate through each row
        row = triangle[i]
        row_size = len(row)
        prev_row = triangle[i-1]
        for j in xrange(row_size): 
            if j == 0:
                row[j] += prev_row[j]
            elif is_last_index(j, row): #edge at right == if j is the last index in this row
                row[j] += prev_row[j-1]
            else:
                row[j] += min(prev_row[j-1], prev_row[j])
    return min(triangle[-1])

def minimumTotal1(self, triangle):
    if not triangle:
        return 
    res = [[0 for i in xrange(len(row))] for row in triangle]
    res[0][0] = triangle[0][0]
    for i in xrange(1, len(triangle)):
        for j in xrange(len(triangle[i])):
            if j == 0:
                res[i][j] = res[i-1][j] + triangle[i][j]
            elif j == len(triangle[i])-1:
                res[i][j] = res[i-1][j-1] + triangle[i][j]
            else:
                res[i][j] = min(res[i-1][j-1], res[i-1][j]) + triangle[i][j]
    return min(res[-1])
  
  O(N)
  N=size of triangle
  
  
  O(N * M)
  N = size of triangle
  M = height
  height and last row are the same size
  time complexity 
  M^2 + (M-1)^2 + (M-2)^2 ... 1
   def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        min_path = triangle[-1]
        for row in triangle[-2::-1]:
          # Group option pairs and pick the best option. best_option[n] is the best option for row[n]
          O(M^2)
          best_option = (min(min_path[i:i + 2]) for i in range(len(min_path) - 1))
          # Update min_path to be the best option for the new row
          min_path = [sum(path) for path in zip(row, best_option)]
        return min_path[0]
