#min distance in a BST tree
#range() – This returns a range object (a type of iterable).
#xrange() – This function returns the generator object that can be used to display numbers only by looping. 
#Only particular range is displayed on demand and hence called “lazy evaluation“.

#the python function of sorted(), object.sort() 
the sorted function : sorted(some object), the mixed type could not be applied 
object.sort() function 

#
https://realpython.com/python-sort/

#a sorted array to a BST tree
https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        vals = []
        
        def dfs(node):
            if node:  
                vals.append(node.val)
                dfs(node.left)
                dfs(node.right)
            
        dfs(root)
        vals.sort()
        
        #after the array is sorted then calculate the difference between the array 
        min_val = min(vals[i+1] - vals[i] for i in range(len(vals) - 1))
        
        return min_val

##inorder traversal (??) 
class Solution(object):
    def minDiffInBST(self, root):
        def dfs(node):
            if node:
                dfs(node.left)
                self.ans = min(self.ans, node.val - self.prev)
                self.prev = node.val
                dfs(node.right)

        self.prev = float('-inf')
        self.ans = float('inf')
        dfs(root)
        return self.ans

#balanced tree
#Given a binary search tree, return a balanced binary search tree with the same node values.
#A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.
#which means the 0 <= max(Hright, Hleft) <= 1



        
