// Copy and paste your work, or start typing.
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/



https://leetcode.com/problems/maximum-depth-of-binary-tree/
height-depth
   null
height 0

    2
  /    \
null   null

root has 2 heights: right: 3 left: 1
      we only care about the maximum height: 3
      1
    1   1
   1 1
  1
height = 4

height = 2
   1
 2   null

    
      1
  1       1
1  1    2   2
 2     2

  
    null => 0
    
    
    2 => 1
   / \ 
    
    
    3         => 2
  2   null
  
root = 1
def height(root):
  if root == null:
    return 0
  max_sub = max(
    height(root.left), # height(2) => 1
    height(root.right)) # height(null) => 0
  return 1 + max_sub # => 1+1

  2
n    n
height = 1
call #2
root = 2
def height(root):
  if root == null:
    return 0
  max_sub = max(
    height(root.left), # height(null) => 0
    height(root.right)) # height(null) => 0
  return 1 + max_sub

null
call #3 => 0
def height(root):
  if root == null:
    return 0
  max_sub = max(
    height(root.left),
    height(root.right))
  return 1 + max_sub



      2
   2     2


https://leetcode.com/problems/diameter-of-binary-tree/
https://leetcode.com/problems/binary-tree-maximum-path-sum/
  
final - "this variable can never be reassigned"
final int x = 7;

x = 7;

private/public

c++ is a compiled language
C++ >> compiler >> assembly code >> run with cPU
assebmly code is very specific for your CPU

python is interpreted
need to run "python" (written in C)
python code >> run with python runtime = slow

  class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        diameter = 0

        def longest_path(node):
            if not node:
                return 0
            nonlocal diameter
            # recursively find the longest path in
            # both left child and right child
            left_path = longest_path(node.left)
            right_path = longest_path(node.right)

            # update the diameter if left_path plus right_path is larger
            diameter = max(diameter, left_path + right_path)

            # return the longest one between left_path and right_path;
            # remember to add 1 for the path connecting the node and its parent
            return max(left_path, right_path) + 1

        longest_path(root)
        return diameter

         1
    2       -1
  3   4        6
      
Graphs can be directional or not 

   1 - 2
   |   |
   4 - 5

Tables/document
person
  friends
  
personID personID
a       | b
a       | c
1. node
class node:
  self.value
  self.neighbors = [list of nodes that neighbor this node]

2. edge list
[
  [1,2],
  [2,5],
  [1,4]
] 

2. adjacency matrix
 1 2 4 5
1- y y n
2---
4----
5------

3. adjacency list
1->[2, 4]
2 -> [1,5]
4 -> [1,5]
5->[2,4]


Learn the basic algos for depth first search and breadth first search
djikstra's algo (heap)



