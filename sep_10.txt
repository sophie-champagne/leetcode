navigate 2d arr:
  count islands problem (graph problem, also helps you understand navigating through 2D arrs)

  
text1: ac 
text2: abc
expect: 2
  
m = 2
n = 3
         j j j
f = [    0 1 2
  i = 0 [1,1,0]
  i = 1 [0,0,0]
]

[1,2,3]
i 

[1,2,3,4]
   j

text1[i - 1] == text2[j - 1]
        a    == b

  
f[i - 1][j]
f[i][j - 1]
def longestCommonSubsequence(self, text1: str, text2: str) -> int:
    m, n = len(text1), len(text2)
    #initalize the two dimension matrix 
    f = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            #from the last element 
            if text1[i - 1] == text2[j - 1]:
                f[i][j] = f[i - 1][j - 1] + 1 # if the current letters match, add 1 to the current solution's memo spot
            else:
                f[i][j] = max(f[i - 1][j], f[i][j - 1]) # get the max of either the left or up value in the memo
    return f[m][n]

acde
 ^
 i

acd
  ^
  j  

  
  
  
https://leetcode.com/problems/climbing-stairs/
https://leetcode.com/problems/longest-common-subsequence/
  
https://user-images.githubusercontent.com/86581871/132112886-01998223-6b29-421d-b589-d0bcb7d0ed57.png
  a, b, i, and tmp is always an int
  00000000..01
  
  O(n) space, dependent on input n
  [2...n-1]
  
  def climbStairs3(self, n):
    if n == 1:
        return 1
    a, b = 1, 2 # declare a b
    for i in xrange(2, n): # xrange creates a list of roughly size n
    # while loop may be better becuase less space and you don't care what the numbers between 2 and n-1 are
        tmp = b # declare tmp
        b = a+b
        a = tmp
    return b
  
  for loops in other languages create a single int variable and just change that variable the whole time, other languages only know the start and end value
  python creates a list of ints for the range, python knows all the range numbers from the start
  int i = 2 -> 3 -> 4 -> ... -> n-1
  
  for (int i = 2; i < n; i++) {  // java does not use extra space for the loop
  }
  
